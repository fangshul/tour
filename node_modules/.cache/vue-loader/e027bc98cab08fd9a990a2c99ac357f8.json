{"remainingRequest":"D:\\tour\\phpfile\\html\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\tour\\phpfile\\html\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\tour\\phpfile\\html\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\tour\\phpfile\\html\\src\\views\\Companion.vue?vue&type=template&id=6b584442&","dependencies":[{"path":"D:\\tour\\phpfile\\html\\src\\views\\Companion.vue","mtime":1585739712528},{"path":"D:\\tour\\phpfile\\html\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\tour\\phpfile\\html\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\tour\\phpfile\\html\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\tour\\phpfile\\html\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}