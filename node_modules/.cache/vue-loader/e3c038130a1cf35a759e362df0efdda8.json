{"remainingRequest":"D:\\tour\\phpfile\\html\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\tour\\phpfile\\html\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\tour\\phpfile\\html\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\tour\\phpfile\\html\\src\\views\\PushCompanion.vue?vue&type=template&id=43262048&scoped=true&","dependencies":[{"path":"D:\\tour\\phpfile\\html\\src\\views\\PushCompanion.vue","mtime":1586789529177},{"path":"D:\\tour\\phpfile\\html\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\tour\\phpfile\\html\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\tour\\phpfile\\html\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\tour\\phpfile\\html\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}